{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","handleSelectedPost","selectedPost","className","map","post","id","title","isSelected","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","removeComment","commentId","Loader","NewCommentForm","handleChange","commentData","isRequired","errorName","handleSubmit","handleClear","isPostingComment","name","email","nameError","find","el","emailError","bodyError","onSubmit","htmlFor","placeholder","value","onChange","PostDetails","isAddingComment","setIsAddingComment","defaultCommentData","useState","isLoading","setIsLoading","isErrorComments","setIsErrorComments","comments","setComments","setCommentData","setIsRequired","useMemo","Object","entries","filter","length","setIsPostingComment","loadComments","a","postId","loadedComments","useEffect","addComment","comment","newComment","Error","deleteComment","handleDeletComment","event","currentTarget","deletedIndex","findIndex","newComments","_comment","i","href","target","preventDefault","UserSelector","users","handleSelectUser","selectedUser","toggle","isOpen","role","user","App","setUsers","setSelectedUser","isErrorPosts","setIsErrorPosts","setPosts","setSelectedPost","setIsOpen","loadUsers","loadedUsers","document","addEventListener","removeEventListener","loadPosts","userId","loadedPosts","findedPost","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.18a61bc4.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  handleSelectedPost: (event: React.MouseEvent<HTMLButtonElement>) => void,\n  selectedPost: Post | null,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  handleSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => {\n          const { id, title } = post;\n\n          const isSelected = selectedPost?.id === id;\n\n          return (\n            <tr data-cy=\"Post\" key={id}>\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  id={`${id}`}\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link', { 'is-light': !isSelected },\n                  )}\n                  onClick={handleSelectedPost}\n                >\n                  {isSelected ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`//comments?postId=${postId}`);\n};\n\nexport const postComment = (comment: CommentData, postId: number) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name: comment.name,\n    email: comment.email,\n    body: comment.body,\n  });\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`//comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { CommentData } from '../types/Comment';\n\ninterface Props {\n  handleChange:\n  (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void,\n  commentData: CommentData,\n  isRequired: boolean,\n  errorName: string[] | undefined,\n  handleSubmit: (event: React.FormEvent) => void,\n  handleClear: () => void,\n  isPostingComment: boolean,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleChange,\n  commentData,\n  isRequired,\n  errorName,\n  handleSubmit,\n  handleClear,\n  isPostingComment,\n}) => {\n  const { name, email, body } = commentData;\n  const nameError = errorName?.find(el => el === 'name');\n  const emailError = errorName?.find(el => el === 'email');\n  const bodyError = errorName?.find(el => el === 'body');\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input', { 'is-danger': isRequired && nameError },\n            )}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {(isRequired && nameError) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {(isRequired && nameError) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input', { 'is-danger': isRequired && emailError },\n            )}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(isRequired && emailError) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {(isRequired && emailError) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', { 'is-danger': isRequired && bodyError },\n            )}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {(isRequired && bodyError) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link', { 'is-loading': isPostingComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { getComments, postComment, removeComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  selectedPost: Post | null,\n  isAddingComment: boolean,\n  setIsAddingComment: (value: boolean) => void,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isAddingComment,\n  setIsAddingComment,\n}) => {\n  const defaultCommentData = {\n    name: '',\n    email: '',\n    body: '',\n  };\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorComments, setIsErrorComments] = useState(false);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [commentData, setCommentData] = useState(defaultCommentData);\n  const [isRequired, setIsRequired] = useState(false);\n  const errorName = useMemo(() => (\n    Object.entries(commentData)\n      .filter(el => el[1].length === 0)?.map(el => el[0])\n  ), [commentData, isRequired]);\n  const [isPostingComment, setIsPostingComment] = useState(false);\n\n  const loadComments = async (post: Post) => {\n    setIsLoading(true);\n\n    try {\n      const loadedComments = await getComments(post.id);\n\n      setComments(loadedComments);\n    } catch {\n      setIsErrorComments(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      loadComments(selectedPost);\n    }\n  }, [selectedPost]);\n\n  const addComment = async () => {\n    setIsPostingComment(true);\n    try {\n      if (selectedPost) {\n        const newComment = await postComment(commentData, selectedPost.id);\n\n        setComments(comments && [...comments, newComment]);\n      }\n    } catch (error) {\n      throw new Error('error');\n    } finally {\n      setIsPostingComment(false);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    try {\n      await removeComment(commentId);\n    } catch (error) {\n      throw new Error('error');\n    }\n  };\n\n  const handleAdding = () => {\n    setIsAddingComment(true);\n  };\n\n  const handleChange\n  = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setCommentData(\n      { ...commentData, [name]: value },\n    );\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsRequired(true);\n    if (errorName.length === 0) {\n      addComment();\n      setIsRequired(false);\n      setCommentData({ ...commentData, body: '' });\n    }\n  };\n\n  const handleClear = () => {\n    setCommentData(defaultCommentData);\n    setIsRequired(false);\n  };\n\n  const handleDeletComment = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { id } = event.currentTarget;\n\n    const deletedIndex = comments?.findIndex(comment => comment.id === +id);\n\n    const newComments = comments?.filter((_comment, i) => deletedIndex !== i);\n\n    setComments(newComments as Comment[]);\n    deleteComment(+id);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isErrorComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments?.map(comment => {\n            const {\n              id,\n              name,\n              email,\n              body,\n            } = comment;\n\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                    {name}\n                  </a>\n                  <button\n                    id={`${id}`}\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={handleDeletComment}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {body}\n                </div>\n              </article>\n            );\n          })}\n\n          {(!isAddingComment && !isLoading && !isErrorComments) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleAdding}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {isAddingComment && (\n          <NewCommentForm\n            handleChange={handleChange}\n            commentData={commentData}\n            errorName={errorName}\n            isRequired={isRequired}\n            handleSubmit={handleSubmit}\n            handleClear={handleClear}\n            isPostingComment={isPostingComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  handleSelectUser: (user: User) => void,\n  selectedUser: User | null,\n  toggle: () => void,\n  isOpen: boolean,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  handleSelectUser,\n  selectedUser,\n  toggle,\n  isOpen,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isOpen })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggle}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item', { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={() => {\n                handleSelectUser(user);\n                toggle();\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isErrorPosts, setIsErrorPosts] = useState(false);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch (error) {\n      throw new Error(`${error}`);\n    }\n  };\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('click', toggle);\n    }\n\n    return () => {\n      document.removeEventListener('click', toggle);\n    };\n  }, [isOpen]);\n\n  const loadPosts = async (user: User) => {\n    setSelectedPost(null);\n    setIsLoading(true);\n    try {\n      const loadedPosts = await getPosts(user.id);\n\n      setPosts(loadedPosts);\n    } catch {\n      setIsErrorPosts(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const handleSelectUser = (user: User) => {\n    setPosts(null);\n    setIsErrorPosts(false);\n    setSelectedUser(user);\n    loadPosts(user);\n  };\n\n  const handleSelectedPost = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setIsAddingComment(false);\n    const { id } = event.currentTarget;\n\n    const findedPost = posts?.find(post => post.id === +id);\n\n    if (findedPost) {\n      setSelectedPost(findedPost);\n    }\n\n    if (findedPost === selectedPost) {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  handleSelectUser={handleSelectUser}\n                  selectedUser={selectedUser}\n                  toggle={toggle}\n                  isOpen={isOpen}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isErrorPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(posts?.length === 0 && !isErrorPosts && !isLoading) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts && posts.length > 0) && (\n                  <PostsList\n                    posts={posts}\n                    handleSelectedPost={handleSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isAddingComment={isAddingComment}\n                  setIsAddingComment={setIsAddingComment}\n                />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => client.get<User[]>('/users');\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}